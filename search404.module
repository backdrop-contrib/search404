<?php
/* $Id$ */

/**
 * Implementation of hook_help().
 */
function search404_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Shows a 404-page with the results of a search for the keywords in the URI.');
  }
}

/**
 * Implementation of hook_menu().
 */
function search404_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'search404',
      'title' => t('Page not found'), 'access' => true,
      'callback' => 'search404_page', 'type' => MENU_CALLBACK);
  }

  return $items;
}

/**
 * Main search function.
 *
 * Updated: Improved by using (stealing) code by Steven
 * - http://drupal.org/node/12668
 */
function search404_page() {
  $output = t('<p>The page you requested was not found.</p>');

  if (user_access('search content')) {
    $ignore = array('dump', 'zip', 'avi', 'a');
    
    $q = $_REQUEST['destination'];
    $keys = split('[^A-Za-z0-9]+', $q);
    $keys = array_diff($keys, $ignore);
    $keys = trim(implode(' ', $keys));
    if ($keys) {
      // Get search results
      $results = module_invoke('node', 'search', 'search', $keys);

      if (isset($results) && is_array($results) && count($results)) {
        // First, check to see if there is exactly 1 result
        if (variable_get('search404_jump', false) && count($results) == 1) {
          drupal_set_message(t('The page you requested does not exist. A search for &quot;<i>%keys</i>&quot; resulted in this page.', array('%keys' => $keys)));
          // overwrite $_REQUEST['destination'] because it is set by drupal_not_found()
          $_REQUEST['destination'] = 'node/' . $results[0]['node']->nid;
          drupal_goto();
        }

        // Otherwise, redirect to a search page
        drupal_set_message(t('The page you requested does not exist. For your convenience, a search was performed using the query &quot;<i>%keys</i>&quot;.', array('%keys' => $keys)));
        // overwrite $_REQUEST['destination'] because it is set by drupal_not_found()
        $_REQUEST['destination'] = 'search/node/' . $keys;
        drupal_goto();
      }
      // If there are not results, tell the user
      else {
        $output .= t('<p>A search was performed for &quot;<i>%keys</i>&quot;, but nothing was found.</p>', array('%keys' => $keys));
      }
    }
  }

  return $output;
}

/**
 * Implementation of hook_settings().
 */
function search404_settings() {
  $form['search404_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set Search 404 to be your default 404 page.'),
    '#default_value' => search404_is_enabled(),
  );

  $form['search404_jump'] = array(
    '#type' => 'checkbox',
    '#title' => t('Jump directly to the search result when there is only one result.'),
    '#default_value' => variable_get('search404_jump', false),
  );

  return $form;
}

function search404_settings_form_submit($form_id, $form_values) {
  variable_set('search404_jump', $form_values['search404_jump']);

  if ($form_values['search404_enable']) {
    search404_enable();
  }
  elseif (!$form_values['search404_enable']) {
    search404_disable();
  }
}

function search404_enable() {
  if (!search404_is_enabled()) {
    variable_set('previous_site_404', variable_get('site_404', ''));
    variable_set('site_404', 'search404');
    drupal_set_message(t('Search 404 is now enabled.'));
  }
}

function search404_disable() {
  if (search404_is_enabled()) {
    variable_set('site_404', variable_get('previous_site_404', ''));
    drupal_set_message(t('Search 404 is now disabled.'));
  }
}

function search404_is_enabled() {
  return (variable_get('site_404', '') == 'search404');
}

?>